{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","show","setShow","useState","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","_jsxs","VStack","spacing","children","FormControl","id","isRequired","_jsx","FormLabel","Input","value","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","localStorage","setItem","JSON","stringify","push","error","description","response","message","isLoading","variant","Signup","showConfirm","setShowConfirm","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","handleConfirmClick","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","useEffect","parse","getItem","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontWeight","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","_ref","user","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","Lottie","options","height","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.efa8a07e.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const [showConfirm, setShowConfirm] = useState(false);\n  const handleConfirmClick = () => setShowConfirm(!showConfirm);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chatapp\");\n      data.append(\"cloud_name\", \"muhammadalam\");\n      fetch(\"https://api.cloudinary.com/v1_1/muhammadalam/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={showConfirm ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleConfirmClick}>\n              {showConfirm ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontWeight=\"600\" fontFamily=\"Work sans\">\n          Chat App\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    height={40}\n                    width={70}\n                    style={{ marginBottom: 5, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  Text,\n  Avatar,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\n// import UserListItem from \"../userAvatar/UserListItem\";\nimport { Spinner } from \"@chakra-ui/spinner\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <Spinner mt=\"10px\" d=\"flex\" />\n            ) : (\n              searchResult?.slice(0, 4).map((user) => (\n                <Box\n                  onClick={() => handleGroup(user)}\n                  cursor=\"pointer\"\n                  bg=\"#E8E8E8\"\n                  _hover={{\n                    background: \"#38B2AC\",\n                    color: \"white\",\n                  }}\n                  w=\"100%\"\n                  d=\"flex\"\n                  alignItems=\"center\"\n                  color=\"black\"\n                  px={3}\n                  py={2}\n                  mb={2}\n                  borderRadius=\"lg\"\n                >\n                  <Avatar\n                    mr={2}\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={user.name}\n                    src={user.pic}\n                  />\n                  <Box>\n                    <Text>{user.name}</Text>\n                    <Text fontSize=\"xs\">\n                      <b>Email : </b>\n                      {user.email}\n                    </Text>\n                  </Box>\n                </Box>\n                // <UserListItem\n                //   key={user._id}\n                //   user={user}\n                //   handleFunction={() => handleGroup(user)}\n                // />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\n// import UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontWeight=\"bold\" fontFamily=\"Work sans\">\n          Chat App\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <Box\n                  onClick={() => accessChat(user._id)}\n                  cursor=\"pointer\"\n                  bg=\"#E8E8E8\"\n                  _hover={{\n                    background: \"#38B2AC\",\n                    color: \"white\",\n                  }}\n                  w=\"100%\"\n                  d=\"flex\"\n                  alignItems=\"center\"\n                  color=\"black\"\n                  px={3}\n                  py={2}\n                  mb={2}\n                  borderRadius=\"lg\"\n                >\n                  <Avatar\n                    mr={2}\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={user.name}\n                    src={user.pic}\n                  />\n                  <Box>\n                    <Text>{user.name}</Text>\n                    <Text fontSize=\"xs\">\n                      <b>Email : </b>\n                      {user.email}\n                    </Text>\n                  </Box>\n                </Box>\n                // <UserListItem\n                //   key={user._id}\n                //   user={user}\n                //   handleFunction={() => accessChat(user._id)}\n                // />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}